package grama.view;

import com.formdev.flatlaf.FlatLightLaf;
import java.awt.event.ItemEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import swing.model.ComboModel;
import grama.model.Graph;
import grama.model.ItineraryException;
import grama.model.Link;
import grama.model.LinkType;
import grama.model.LoadGraphException;
import grama.model.Node;
import grama.model.NodeType;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JComboBox;

/**
 * The class representing the user interface
 * @author BAUDRY Lilian
 * @author VAILLON Albert
 * @version JDK 11.0.13
 */
public class App extends javax.swing.JFrame {
	
	private final Graph graph = new Graph();
	
	private boolean firstChecked = false;
	private final ComboModel<Node> firstNodeListModel = new ComboModel<>();
	private final ComboModel<Node> secondNodeListModel = new ComboModel<>();
	private final ComboModel<Node> firstCityListModel = new ComboModel<>();
	private final ComboModel<Node> secondCityListModel = new ComboModel<>();
	
	/**
	 * Creates new form App
	 */
	public App() {
		initComponents();
		
		canvas.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent e) {
				Object clickedElement = canvas.getHover();
				
				if (clickedElement instanceof Node) {
					displayNode((Node)clickedElement);
					if (!firstChecked) {
						firstNodeListModel.setSelectedItem(clickedElement);
						canvas.addSelected(0, (Node)clickedElement);
						if (((Node)clickedElement).getType() == NodeType.CITY) {
							firstCityListModel.setSelectedItem(clickedElement);
						}
					} else {
						secondNodeListModel.setSelectedItem(clickedElement);
						canvas.addSelected(1, (Node)clickedElement);
						if (((Node)clickedElement).getType() == NodeType.CITY) {
							secondCityListModel.setSelectedItem(clickedElement);
						}
					}
					if (dataPanel.getSelectedIndex() != 2) {
						dataPanel.setSelectedIndex(3);
					}
					itineraryDistanceResult.setText("");
					firstChecked = !firstChecked;
				
				} else if (clickedElement instanceof Link) {
					displayLink((Link)clickedElement);
					dataPanel.setSelectedIndex(1);
				}
			}
		});
	}
	
	public void initGraphUI(){
		canvas.initNodes(graph.getNodes());
		canvas.setDisplayNodes(graph.getNodes());
		canvas.setDisplayLinks(graph.getDistinctLinks());
	}
	
	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphFileChooser = new javax.swing.JFileChooser();
        counterPanel = new javax.swing.JPanel();
        cityCounterLabel = new javax.swing.JLabel();
        recreationCounterLabel = new javax.swing.JLabel();
        restaurantCounterLabel = new javax.swing.JLabel();
        departementalCounterLabel = new javax.swing.JLabel();
        nationalCounterLabel = new javax.swing.JLabel();
        highwayCounterLabel = new javax.swing.JLabel();
        dataPanel = new javax.swing.JTabbedPane();
        placeDataPanel = new javax.swing.JPanel();
        placePanel = new javax.swing.JPanel();
        placeNameLabel = new javax.swing.JLabel();
        placeNameField = new javax.swing.JTextField();
        placeCategoryLabel = new javax.swing.JLabel();
        placeCategoryField = new javax.swing.JTextField();
        neighborsSeparationPanel = new javax.swing.JPanel();
        neighborsSeparationLabel = new javax.swing.JLabel();
        neighborsSeparation = new javax.swing.JSeparator();
        jumpSelectorPanel = new javax.swing.JPanel();
        jumpLabel = new javax.swing.JLabel();
        jumpNumberSelectorPanel = new javax.swing.JPanel();
        jumpNumberSlider = new javax.swing.JSlider();
        jumpNumberSpinner = new javax.swing.JSpinner();
        jumpCategorySelectorPanel = new javax.swing.JPanel();
        citySelectorCheckBox = new javax.swing.JCheckBox();
        recreationSelectorCheckBox = new javax.swing.JCheckBox();
        restaurantSelectorCheckBox = new javax.swing.JCheckBox();
        submitNeighborsButton = new javax.swing.JButton();
        linkDataPanel = new javax.swing.JPanel();
        linkPanel = new javax.swing.JPanel();
        linkcategoryLabel = new javax.swing.JLabel();
        linkCategoryField = new javax.swing.JTextField();
        linkDistanceLabel = new javax.swing.JLabel();
        linkDistanceField = new javax.swing.JTextField();
        relationSeparationPanel = new javax.swing.JPanel();
        relationSeparatorLabel = new javax.swing.JLabel();
        relationSeparator = new javax.swing.JSeparator();
        relationPanel = new javax.swing.JPanel();
        linkDepartureLabel = new javax.swing.JLabel();
        linkArrivalLabel = new javax.swing.JLabel();
        linkDepartureNameField = new javax.swing.JTextField();
        linkArrivalNameField = new javax.swing.JTextField();
        linkDepartureCategoryField = new javax.swing.JTextField();
        linkArrivalCategoryField = new javax.swing.JTextField();
        comparisonDataPanel = new javax.swing.JPanel();
        comparisonPanel = new javax.swing.JPanel();
        comparisonSelectorFirstCityLabel = new javax.swing.JLabel();
        comparisonSelectorSecondCityLabel = new javax.swing.JLabel();
        comparisonSelectorFirstCityComboBox = new javax.swing.JComboBox<>();
        comparisonSelectorSecondCityComboBox = new javax.swing.JComboBox<>();
        evaluationSeparatorPanel = new javax.swing.JPanel();
        evaluationSeparatorLabel = new javax.swing.JLabel();
        evaluationSeparator = new javax.swing.JSeparator();
        restaurantComparisonPanel = new javax.swing.JPanel();
        firstCityRestaurantComparisonRadio = new javax.swing.JRadioButton();
        restaurantComparisonLabel = new javax.swing.JLabel();
        secondCityRestaurantComparisonRadio = new javax.swing.JRadioButton();
        recreationComparisonPanel = new javax.swing.JPanel();
        firstCityRecreationComparisonRadio = new javax.swing.JRadioButton();
        recreationComparisonLabel = new javax.swing.JLabel();
        secondCityRecreationComparisonRadio = new javax.swing.JRadioButton();
        cityComparisonPanel = new javax.swing.JPanel();
        firstCityOpenComparisonRadio = new javax.swing.JRadioButton();
        cityComparisonLabel = new javax.swing.JLabel();
        secondCityOpenComparisonRadio = new javax.swing.JRadioButton();
        itineraryDataPanel = new javax.swing.JPanel();
        itineraryPanel = new javax.swing.JPanel();
        originItineraryLabel = new javax.swing.JLabel();
        destinationItineraryLabel = new javax.swing.JLabel();
        departureItineraryComboBox = new javax.swing.JComboBox<>();
        destinationItineraryComboBox = new javax.swing.JComboBox<>();
        stepSeparationPanel = new javax.swing.JPanel();
        stepSeparationLabel = new javax.swing.JLabel();
        stepSeparation = new javax.swing.JSeparator();
        planningItineraryPanel = new javax.swing.JPanel();
        cityItineraryLabel = new javax.swing.JLabel();
        recreationItineraryLabel = new javax.swing.JLabel();
        restaurantItineraryLabel = new javax.swing.JLabel();
        cityItinerarySpinner = new javax.swing.JSpinner();
        recreationItinerarySpinner = new javax.swing.JSpinner();
        restaurantItinerarySpinner = new javax.swing.JSpinner();
        submitPanel = new javax.swing.JPanel();
        submitItineraryButton = new javax.swing.JButton();
        itineraryDistanceResult = new javax.swing.JLabel();
        canvas = new grama.view.Canvas();
        MenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        refreshMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        jSeparatorMenuItems = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        graphFileChooser.setCurrentDirectory(new File("."));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Graph Map Analysis");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(750, 400));
        setPreferredSize(new java.awt.Dimension(1275, 850));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                App.this.windowClosing(evt);
            }
        });

        counterPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        counterPanel.setPreferredSize(new java.awt.Dimension(720, 60));
        counterPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 50, 20));

        cityCounterLabel.setText("Villes : 0");
        counterPanel.add(cityCounterLabel);

        recreationCounterLabel.setText("Loisirs : 0");
        counterPanel.add(recreationCounterLabel);

        restaurantCounterLabel.setText("Restaurants : 0");
        counterPanel.add(restaurantCounterLabel);

        departementalCounterLabel.setText("DÃ©partementales : 0");
        counterPanel.add(departementalCounterLabel);

        nationalCounterLabel.setText("Nationales : 0");
        counterPanel.add(nationalCounterLabel);

        highwayCounterLabel.setText("Autoroutes : 0");
        counterPanel.add(highwayCounterLabel);

        getContentPane().add(counterPanel, java.awt.BorderLayout.SOUTH);

        dataPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dataPanel.setMinimumSize(new java.awt.Dimension(183, 104));
        dataPanel.setPreferredSize(new java.awt.Dimension(334, 100));

        placeDataPanel.setLayout(new javax.swing.BoxLayout(placeDataPanel, javax.swing.BoxLayout.PAGE_AXIS));

        placePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 5, 20, 40));
        placePanel.setMaximumSize(new java.awt.Dimension(32767, 100));
        placePanel.setMinimumSize(new java.awt.Dimension(183, 104));
        placePanel.setLayout(new java.awt.GridLayout(0, 2, 0, 20));

        placeNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        placeNameLabel.setText("Nom");
        placePanel.add(placeNameLabel);

        placeNameField.setEditable(false);
        placeNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeSearchbar(evt);
            }
        });
        placePanel.add(placeNameField);

        placeCategoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        placeCategoryLabel.setText("CatÃ©gorie");
        placePanel.add(placeCategoryLabel);

        placeCategoryField.setEditable(false);
        placeCategoryField.setMaximumSize(new java.awt.Dimension(2147483647, 10));
        placePanel.add(placeCategoryField);

        placeDataPanel.add(placePanel);

        neighborsSeparationPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 0, 20, 0));

        neighborsSeparationLabel.setText("Voisins");

        neighborsSeparation.setPreferredSize(new java.awt.Dimension(200, 5));

        javax.swing.GroupLayout neighborsSeparationPanelLayout = new javax.swing.GroupLayout(neighborsSeparationPanel);
        neighborsSeparationPanel.setLayout(neighborsSeparationPanelLayout);
        neighborsSeparationPanelLayout.setHorizontalGroup(
            neighborsSeparationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neighborsSeparationPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(neighborsSeparationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(neighborsSeparation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        neighborsSeparationPanelLayout.setVerticalGroup(
            neighborsSeparationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neighborsSeparationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(neighborsSeparation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(neighborsSeparationLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        placeDataPanel.add(neighborsSeparationPanel);

        jumpSelectorPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 25));

        jumpLabel.setText("Nombre de sauts");
        jumpSelectorPanel.add(jumpLabel);

        jumpNumberSlider.setMaximum(0);
        jumpNumberSlider.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jumpNumberSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderValueChanged(evt);
            }
        });
        jumpNumberSelectorPanel.add(jumpNumberSlider);

        jumpNumberSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        jumpNumberSpinner.setToolTipText("");
        jumpNumberSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerValueChanged(evt);
            }
        });
        jumpNumberSelectorPanel.add(jumpNumberSpinner);

        jumpSelectorPanel.add(jumpNumberSelectorPanel);

        jumpCategorySelectorPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        citySelectorCheckBox.setSelected(true);
        citySelectorCheckBox.setText("Villes");
        citySelectorCheckBox.setEnabled(false);
        jumpCategorySelectorPanel.add(citySelectorCheckBox);

        recreationSelectorCheckBox.setSelected(true);
        recreationSelectorCheckBox.setText("Loisirs");
        recreationSelectorCheckBox.setEnabled(false);
        jumpCategorySelectorPanel.add(recreationSelectorCheckBox);

        restaurantSelectorCheckBox.setSelected(true);
        restaurantSelectorCheckBox.setText("Restaurants");
        restaurantSelectorCheckBox.setEnabled(false);
        jumpCategorySelectorPanel.add(restaurantSelectorCheckBox);

        jumpSelectorPanel.add(jumpCategorySelectorPanel);

        submitNeighborsButton.setText("Valider");
        submitNeighborsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitNeighbors(evt);
            }
        });
        jumpSelectorPanel.add(submitNeighborsButton);

        placeDataPanel.add(jumpSelectorPanel);

        dataPanel.addTab("Emplacement", placeDataPanel);

        linkDataPanel.setLayout(new javax.swing.BoxLayout(linkDataPanel, javax.swing.BoxLayout.PAGE_AXIS));

        linkPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 5, 20, 40));
        linkPanel.setMaximumSize(new java.awt.Dimension(32767, 105));
        linkPanel.setLayout(new java.awt.GridLayout(0, 2, 0, 20));

        linkcategoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linkcategoryLabel.setText("CatÃ©gorie");
        linkPanel.add(linkcategoryLabel);

        linkCategoryField.setEditable(false);
        linkPanel.add(linkCategoryField);

        linkDistanceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linkDistanceLabel.setText("KilomÃ©trage");
        linkPanel.add(linkDistanceLabel);

        linkDistanceField.setEditable(false);
        linkDistanceField.setMaximumSize(new java.awt.Dimension(2147483647, 10));
        linkPanel.add(linkDistanceField);

        linkDataPanel.add(linkPanel);

        relationSeparationPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 0, 20, 0));

        relationSeparatorLabel.setText("Relation");

        relationSeparator.setPreferredSize(new java.awt.Dimension(200, 5));

        javax.swing.GroupLayout relationSeparationPanelLayout = new javax.swing.GroupLayout(relationSeparationPanel);
        relationSeparationPanel.setLayout(relationSeparationPanelLayout);
        relationSeparationPanelLayout.setHorizontalGroup(
            relationSeparationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(relationSeparationPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(relationSeparatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(relationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        relationSeparationPanelLayout.setVerticalGroup(
            relationSeparationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(relationSeparationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(relationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(relationSeparatorLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        linkDataPanel.add(relationSeparationPanel);

        relationPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        relationPanel.setMaximumSize(new java.awt.Dimension(32767, 150));
        relationPanel.setMinimumSize(new java.awt.Dimension(198, 150));
        relationPanel.setLayout(new java.awt.GridLayout(0, 2, 30, 20));

        linkDepartureLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linkDepartureLabel.setText("DÃ©part");
        relationPanel.add(linkDepartureLabel);

        linkArrivalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linkArrivalLabel.setText("ArrivÃ©e");
        relationPanel.add(linkArrivalLabel);

        linkDepartureNameField.setEditable(false);
        linkDepartureNameField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        relationPanel.add(linkDepartureNameField);

        linkArrivalNameField.setEditable(false);
        linkArrivalNameField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        relationPanel.add(linkArrivalNameField);

        linkDepartureCategoryField.setEditable(false);
        linkDepartureCategoryField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        relationPanel.add(linkDepartureCategoryField);

        linkArrivalCategoryField.setEditable(false);
        linkArrivalCategoryField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        relationPanel.add(linkArrivalCategoryField);

        linkDataPanel.add(relationPanel);

        dataPanel.addTab("Route", linkDataPanel);

        comparisonDataPanel.setLayout(new javax.swing.BoxLayout(comparisonDataPanel, javax.swing.BoxLayout.PAGE_AXIS));

        comparisonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        comparisonPanel.setMaximumSize(new java.awt.Dimension(32767, 100));
        comparisonPanel.setMinimumSize(new java.awt.Dimension(214, 100));
        comparisonPanel.setLayout(new java.awt.GridLayout(0, 2, 30, 20));

        comparisonSelectorFirstCityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        comparisonSelectorFirstCityLabel.setText("Ville nÂ°1");
        comparisonPanel.add(comparisonSelectorFirstCityLabel);

        comparisonSelectorSecondCityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        comparisonSelectorSecondCityLabel.setText("Ville nÂ°2");
        comparisonPanel.add(comparisonSelectorSecondCityLabel);

        comparisonSelectorFirstCityComboBox.setModel(firstCityListModel);
        comparisonSelectorFirstCityComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comparisonFirstComboValueChanged(evt);
            }
        });
        comparisonPanel.add(comparisonSelectorFirstCityComboBox);

        comparisonSelectorSecondCityComboBox.setModel(secondCityListModel);
        comparisonSelectorSecondCityComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comparisonSecondComboValueChanged(evt);
            }
        });
        comparisonPanel.add(comparisonSelectorSecondCityComboBox);

        comparisonDataPanel.add(comparisonPanel);

        evaluationSeparatorPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 0, 20, 0));

        evaluationSeparatorLabel.setText("Evaluation");

        evaluationSeparator.setPreferredSize(new java.awt.Dimension(200, 5));

        javax.swing.GroupLayout evaluationSeparatorPanelLayout = new javax.swing.GroupLayout(evaluationSeparatorPanel);
        evaluationSeparatorPanel.setLayout(evaluationSeparatorPanelLayout);
        evaluationSeparatorPanelLayout.setHorizontalGroup(
            evaluationSeparatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(evaluationSeparatorPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(evaluationSeparatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(evaluationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        evaluationSeparatorPanelLayout.setVerticalGroup(
            evaluationSeparatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(evaluationSeparatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(evaluationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(evaluationSeparatorLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        comparisonDataPanel.add(evaluationSeparatorPanel);

        restaurantComparisonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        restaurantComparisonPanel.setMaximumSize(new java.awt.Dimension(32767, 50));
        restaurantComparisonPanel.setMinimumSize(new java.awt.Dimension(135, 50));
        restaurantComparisonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        firstCityRestaurantComparisonRadio.setEnabled(false);
        restaurantComparisonPanel.add(firstCityRestaurantComparisonRadio);

        restaurantComparisonLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        restaurantComparisonLabel.setText("Gastonomique");
        restaurantComparisonLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        restaurantComparisonPanel.add(restaurantComparisonLabel);

        secondCityRestaurantComparisonRadio.setEnabled(false);
        restaurantComparisonPanel.add(secondCityRestaurantComparisonRadio);

        comparisonDataPanel.add(restaurantComparisonPanel);

        recreationComparisonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        recreationComparisonPanel.setMaximumSize(new java.awt.Dimension(32767, 50));
        recreationComparisonPanel.setMinimumSize(new java.awt.Dimension(135, 50));
        recreationComparisonPanel.setPreferredSize(new java.awt.Dimension(198, 50));
        recreationComparisonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        firstCityRecreationComparisonRadio.setEnabled(false);
        recreationComparisonPanel.add(firstCityRecreationComparisonRadio);

        recreationComparisonLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        recreationComparisonLabel.setText("Culturelle");
        recreationComparisonLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        recreationComparisonPanel.add(recreationComparisonLabel);

        secondCityRecreationComparisonRadio.setEnabled(false);
        recreationComparisonPanel.add(secondCityRecreationComparisonRadio);

        comparisonDataPanel.add(recreationComparisonPanel);

        cityComparisonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        cityComparisonPanel.setMaximumSize(new java.awt.Dimension(32767, 50));
        cityComparisonPanel.setMinimumSize(new java.awt.Dimension(135, 50));
        cityComparisonPanel.setPreferredSize(new java.awt.Dimension(198, 50));
        cityComparisonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        firstCityOpenComparisonRadio.setEnabled(false);
        cityComparisonPanel.add(firstCityOpenComparisonRadio);

        cityComparisonLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cityComparisonLabel.setText("Ouvert");
        cityComparisonLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        cityComparisonPanel.add(cityComparisonLabel);

        secondCityOpenComparisonRadio.setEnabled(false);
        cityComparisonPanel.add(secondCityOpenComparisonRadio);

        comparisonDataPanel.add(cityComparisonPanel);

        dataPanel.addTab("Comparaisons", comparisonDataPanel);

        itineraryDataPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        itineraryDataPanel.setLayout(new javax.swing.BoxLayout(itineraryDataPanel, javax.swing.BoxLayout.PAGE_AXIS));

        itineraryPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        itineraryPanel.setMaximumSize(new java.awt.Dimension(32767, 100));
        itineraryPanel.setMinimumSize(new java.awt.Dimension(274, 100));
        itineraryPanel.setLayout(new java.awt.GridLayout(0, 2, 30, 20));

        originItineraryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        originItineraryLabel.setText("Origine");
        itineraryPanel.add(originItineraryLabel);

        destinationItineraryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        destinationItineraryLabel.setText("Destination");
        itineraryPanel.add(destinationItineraryLabel);

        departureItineraryComboBox.setModel(firstNodeListModel);
        departureItineraryComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itineraryFirstComboValueChanged(evt);
            }
        });
        itineraryPanel.add(departureItineraryComboBox);

        destinationItineraryComboBox.setModel(secondNodeListModel);
        destinationItineraryComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itinerarySecondComboValueChanged(evt);
            }
        });
        itineraryPanel.add(destinationItineraryComboBox);

        itineraryDataPanel.add(itineraryPanel);

        stepSeparationPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 0, 20, 0));

        stepSeparationLabel.setText("Etapes");

        stepSeparation.setPreferredSize(new java.awt.Dimension(200, 5));

        javax.swing.GroupLayout stepSeparationPanelLayout = new javax.swing.GroupLayout(stepSeparationPanel);
        stepSeparationPanel.setLayout(stepSeparationPanelLayout);
        stepSeparationPanelLayout.setHorizontalGroup(
            stepSeparationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stepSeparationPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(stepSeparationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(stepSeparation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        stepSeparationPanelLayout.setVerticalGroup(
            stepSeparationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stepSeparationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(stepSeparation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(stepSeparationLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        itineraryDataPanel.add(stepSeparationPanel);

        planningItineraryPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        planningItineraryPanel.setMaximumSize(new java.awt.Dimension(32767, 100));
        planningItineraryPanel.setLayout(new java.awt.GridLayout(0, 3, 40, 20));

        cityItineraryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cityItineraryLabel.setText("Villes");
        planningItineraryPanel.add(cityItineraryLabel);

        recreationItineraryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        recreationItineraryLabel.setText("Loisirs");
        planningItineraryPanel.add(recreationItineraryLabel);

        restaurantItineraryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        restaurantItineraryLabel.setText("Restaurants");
        planningItineraryPanel.add(restaurantItineraryLabel);

        cityItinerarySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        cityItinerarySpinner.setToolTipText("");
        planningItineraryPanel.add(cityItinerarySpinner);

        recreationItinerarySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        recreationItinerarySpinner.setToolTipText("");
        planningItineraryPanel.add(recreationItinerarySpinner);

        restaurantItinerarySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        restaurantItinerarySpinner.setToolTipText("");
        planningItineraryPanel.add(restaurantItinerarySpinner);

        itineraryDataPanel.add(planningItineraryPanel);

        submitPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 0, 20, 0));
        submitPanel.setLayout(new javax.swing.BoxLayout(submitPanel, javax.swing.BoxLayout.LINE_AXIS));

        submitItineraryButton.setText("Valider");
        submitItineraryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitItinerary(evt);
            }
        });
        submitPanel.add(submitItineraryButton);

        itineraryDataPanel.add(submitPanel);

        itineraryDistanceResult.setAlignmentX(0.5F);
        itineraryDataPanel.add(itineraryDistanceResult);

        dataPanel.addTab("ItinÃ©raires", itineraryDataPanel);

        getContentPane().add(dataPanel, java.awt.BorderLayout.EAST);

        canvas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 686, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );

        getContentPane().add(canvas, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic(KeyEvent.VK_F);
        fileMenu.setText("Fichier");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMenuItem.setMnemonic(KeyEvent.VK_O);
        openMenuItem.setText("Ouvrir");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphOpening(evt);
            }
        });
        fileMenu.add(openMenuItem);

        refreshMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        refreshMenuItem.setText("RÃ©initialiser");
        refreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRefresh(evt);
            }
        });
        fileMenu.add(refreshMenuItem);

        closeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        closeMenuItem.setMnemonic(KeyEvent.VK_F);
        closeMenuItem.setText("Fermer");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemClose(evt);
            }
        });
        fileMenu.add(closeMenuItem);
        fileMenu.add(jSeparatorMenuItems);

        exitMenuItem.setMnemonic(KeyEvent.VK_Q);
        exitMenuItem.setText("Quitter");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExit(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        MenuBar.add(fileMenu);

        HelpMenu.setMnemonic(KeyEvent.VK_COMMA);
        HelpMenu.setText("?");

        aboutMenuItem.setMnemonic(KeyEvent.VK_A);
        aboutMenuItem.setText("A propos");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAbout(evt);
            }
        });
        HelpMenu.add(aboutMenuItem);

        MenuBar.add(HelpMenu);

        setJMenuBar(MenuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
	
	private void enablePanels(boolean state) {
		dataPanel.setSelectedIndex(0);
		citySelectorCheckBox.setEnabled(state);
		recreationSelectorCheckBox.setEnabled(state);
		restaurantSelectorCheckBox.setEnabled(state);
		citySelectorCheckBox.setSelected(true);
		recreationSelectorCheckBox.setSelected(true);
		restaurantSelectorCheckBox.setSelected(true);
		placeNameField.setEditable(state);
		placeNameField.setText("");
		placeCategoryField.setText("");
		cityCounterLabel.setText("Villes : " + graph.getNumberNodes(NodeType.CITY));
		restaurantCounterLabel.setText("Restaurants : " + graph.getNumberNodes(NodeType.RESTAURANT));
		recreationCounterLabel.setText("Loisirs : " + graph.getNumberNodes(NodeType.RECREATION));
		departementalCounterLabel.setText("DÃ©partmentales : " + graph.getNumberLinks(LinkType.DEPARTMENTAL));
		nationalCounterLabel.setText("Nationales : " + graph.getNumberLinks(LinkType.NATIONAL));
		highwayCounterLabel.setText("Autoroutes : " + graph.getNumberLinks(LinkType.HIGHWAY));
	}
	
	private void resetValueSpinner() {
		jumpNumberSlider.setValue(0);
		jumpNumberSpinner.setValue(0);
		cityItinerarySpinner.setValue(0);
		recreationItinerarySpinner.setValue(0);
		restaurantItinerarySpinner.setValue(0);
	}
	
	private void cityComparison() {
		Node n1 = (Node)comparisonSelectorFirstCityComboBox.getSelectedItem();
		Node n2 = (Node)comparisonSelectorSecondCityComboBox.getSelectedItem();
		
		if (n1 != null && n2 != null) {
			int returnValue = n1.isMoreLinkedToType(n2, NodeType.RESTAURANT);
			firstCityRestaurantComparisonRadio.setSelected(returnValue >= 0);
			secondCityRestaurantComparisonRadio.setSelected(returnValue <= 0);
			
			returnValue = n1.isMoreLinkedToType(n2, NodeType.RECREATION);
			firstCityRecreationComparisonRadio.setSelected(returnValue >= 0);
			secondCityRecreationComparisonRadio.setSelected(returnValue <= 0);
			
			returnValue = n1.isMoreLinkedToType(n2, NodeType.CITY);
			firstCityOpenComparisonRadio.setSelected(returnValue >= 0);
			secondCityOpenComparisonRadio.setSelected(returnValue <= 0);
		}
	}
	
	private void displayNode(Node node) {
		if (node == null) {
			placeCategoryField.setText("");
		} else {
			placeNameField.setText(node.getName());
			placeCategoryField.setText(node.getType().toString());
		}
	}
	
	private void displayLink(Link link) {
		linkCategoryField.setText(link.getType().toString());
		linkDistanceField.setText(Integer.toString(link.getDistance()));
		
		Node departure = link.getDeparture();
		linkDepartureNameField.setText(departure.getName());
		linkDepartureCategoryField.setText(departure.getType().toString());
		
		Node destination = link.getDestination();
		linkArrivalNameField.setText(destination.getName());
		linkArrivalCategoryField.setText(destination.getType().toString());
	}
	
	private void displayNeighbors(Node node, int nbJumps) {
		List<NodeType> types = new ArrayList<>();
		
		if (recreationSelectorCheckBox.isSelected())
			types.add(NodeType.RECREATION);
		
		if (citySelectorCheckBox.isSelected())
			types.add(NodeType.CITY);
		
		if (restaurantSelectorCheckBox.isSelected())
			types.add(NodeType.RESTAURANT);
		
		List<Node> neighborsList = node.getNeighbors(nbJumps, new ArrayList<>(), types);
		neighborsList.add(graph.getNode(placeNameField.getText()));
		canvas.setDisplay(neighborsList, graph.getDistinctLinks());
	}
	
	private void confirmExit() {
		int returnValue = JOptionPane.showConfirmDialog(this, "Souhaitez-vous vraiment quitter l'application ?", "Attention", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
		if (returnValue == JOptionPane.OK_OPTION) {
			System.exit(0);
		}
	}
	
    private void graphOpening(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphOpening
		int returnValue = graphFileChooser.showOpenDialog(this);
		if (returnValue == javax.swing.JFileChooser.APPROVE_OPTION) {
			String fileName = graphFileChooser.getSelectedFile().getAbsolutePath();
			try {
				graph.load(fileName);
				
				List<Node> cityNodes = graph.getNodes(NodeType.CITY);
				firstCityListModel.addAll(cityNodes);
				secondCityListModel.addAll(cityNodes);
				List<Node> nodes = graph.getNodes();
				firstNodeListModel.addAll(nodes);
				secondNodeListModel.addAll(nodes);
				
				int nbNodes = nodes.size() - 1;
				resetValueSpinner();
				jumpNumberSlider.setMaximum(nbNodes);
				((SpinnerNumberModel)jumpNumberSpinner.getModel()).setMaximum(nbNodes);
				((SpinnerNumberModel)cityItinerarySpinner.getModel()).setMaximum(graph.getNumberNodes(NodeType.CITY));
				((SpinnerNumberModel)recreationItinerarySpinner.getModel()).setMaximum(graph.getNumberNodes(NodeType.RECREATION));
				((SpinnerNumberModel)restaurantItinerarySpinner.getModel()).setMaximum(graph.getNumberNodes(NodeType.RESTAURANT));
				
				enablePanels(true);
				initGraphUI();
			} catch (LoadGraphException e) {
				JOptionPane.showConfirmDialog(this, e.getMessage(), "Erreur", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_graphOpening
	
    private void menuItemExit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExit
        confirmExit();
    }//GEN-LAST:event_menuItemExit

    private void windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosing
        confirmExit();
    }//GEN-LAST:event_windowClosing

    private void menuItemAbout(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAbout
        JOptionPane.showConfirmDialog(this, "Graph Map Analysis - Application Java - Version 1.0", "A propos", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuItemAbout

    private void sliderValueChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderValueChanged
		jumpNumberSpinner.setValue(jumpNumberSlider.getValue());
    }//GEN-LAST:event_sliderValueChanged

    private void spinnerValueChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerValueChanged
		jumpNumberSlider.setValue((Integer)jumpNumberSpinner.getValue());
    }//GEN-LAST:event_spinnerValueChanged

    private void comparisonFirstComboValueChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comparisonFirstComboValueChanged
		if (evt.getStateChange() != ItemEvent.DESELECTED) {
			Node selectedNode = (Node)((JComboBox)evt.getSource()).getSelectedItem();
			departureItineraryComboBox.setSelectedItem(selectedNode);
			canvas.addSelected(0, selectedNode);
			cityComparison();
		}
    }//GEN-LAST:event_comparisonFirstComboValueChanged

    private void comparisonSecondComboValueChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comparisonSecondComboValueChanged
		if (evt.getStateChange() != ItemEvent.DESELECTED) {
			Node selectedNode = (Node)((JComboBox)evt.getSource()).getSelectedItem();
			destinationItineraryComboBox.setSelectedItem(selectedNode);
			canvas.addSelected(1, selectedNode);
			cityComparison();
		}
    }//GEN-LAST:event_comparisonSecondComboValueChanged

    private void submitItinerary(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitItinerary
		Node departure = (Node)departureItineraryComboBox.getSelectedItem();
		Node arrival = (Node)destinationItineraryComboBox.getSelectedItem();
		
		if (departure != null && arrival != null) {
			try {
				List<Link> itinerary = graph.getShortestItinerary(departure, arrival, 
						(Integer)restaurantItinerarySpinner.getValue(), 
						(Integer)cityItinerarySpinner.getValue(), 
						(Integer)recreationItinerarySpinner.getValue());
				
				itineraryDistanceResult.setText("Distance total : " + graph.getDistancePath(itinerary) + " km");
				canvas.setDisplayLinks(itinerary);
				
			} catch (ItineraryException e) {
				JOptionPane.showConfirmDialog(this, e.getMessage(), "Erreur", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_submitItinerary

    private void nodeSearchbar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeSearchbar
		Node search = graph.getNode(placeNameField.getText());
		displayNode(search);
		jumpNumberSpinner.setValue(0);
		jumpNumberSlider.setValue(0);
    }//GEN-LAST:event_nodeSearchbar

    private void submitNeighbors(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitNeighbors
		Node researchedNode = graph.getNode(placeNameField.getText());
		int nbNeighbors = jumpNumberSlider.getValue();
		if (researchedNode != null && nbNeighbors > 0) {
			displayNeighbors(researchedNode, nbNeighbors);
		}
    }//GEN-LAST:event_submitNeighbors

    private void menuItemClose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemClose
		enablePanels(false);
		canvas.reset();
		graph.reset();
		
		firstCityListModel.reset();
		secondCityListModel.reset();
		firstNodeListModel.reset();
		secondNodeListModel.reset();
		
		resetValueSpinner();
		jumpNumberSlider.setMaximum(0);
		((SpinnerNumberModel)jumpNumberSpinner.getModel()).setMaximum(0);
		((SpinnerNumberModel)cityItinerarySpinner.getModel()).setMaximum(0);
		((SpinnerNumberModel)recreationItinerarySpinner.getModel()).setMaximum(0);
		((SpinnerNumberModel)restaurantItinerarySpinner.getModel()).setMaximum(0);
    }//GEN-LAST:event_menuItemClose

    private void menuItemRefresh(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRefresh
		canvas.resetSelected();
		canvas.setDisplay(graph.getNodes(), graph.getDistinctLinks());
		dataPanel.setSelectedIndex(0);
    }//GEN-LAST:event_menuItemRefresh

    private void itineraryFirstComboValueChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itineraryFirstComboValueChanged
		Node selectedNode = (Node)((JComboBox)evt.getSource()).getSelectedItem();
		comparisonSelectorFirstCityComboBox.setSelectedItem(selectedNode);
		canvas.addSelected(0, selectedNode);
    }//GEN-LAST:event_itineraryFirstComboValueChanged

    private void itinerarySecondComboValueChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itinerarySecondComboValueChanged
		Node selectedNode = (Node)((JComboBox)evt.getSource()).getSelectedItem();
		comparisonSelectorSecondCityComboBox.setSelectedItem(selectedNode);
		canvas.addSelected(1, selectedNode);
    }//GEN-LAST:event_itinerarySecondComboValueChanged

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		try {
			UIManager.setLookAndFeel(new FlatLightLaf());
		} catch(UnsupportedLookAndFeelException e) {
			System.err.println("Failed to initialize LaF");
		}

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(() -> new App().setVisible(true));
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem aboutMenuItem;
    private grama.view.Canvas canvas;
    private javax.swing.JLabel cityComparisonLabel;
    private javax.swing.JPanel cityComparisonPanel;
    private javax.swing.JLabel cityCounterLabel;
    private javax.swing.JLabel cityItineraryLabel;
    private javax.swing.JSpinner cityItinerarySpinner;
    private javax.swing.JCheckBox citySelectorCheckBox;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JPanel comparisonDataPanel;
    private javax.swing.JPanel comparisonPanel;
    private javax.swing.JComboBox<Node> comparisonSelectorFirstCityComboBox;
    private javax.swing.JLabel comparisonSelectorFirstCityLabel;
    private javax.swing.JComboBox<Node> comparisonSelectorSecondCityComboBox;
    private javax.swing.JLabel comparisonSelectorSecondCityLabel;
    private javax.swing.JPanel counterPanel;
    private javax.swing.JTabbedPane dataPanel;
    private javax.swing.JLabel departementalCounterLabel;
    private javax.swing.JComboBox<Node> departureItineraryComboBox;
    private javax.swing.JComboBox<Node> destinationItineraryComboBox;
    private javax.swing.JLabel destinationItineraryLabel;
    private javax.swing.JSeparator evaluationSeparator;
    private javax.swing.JLabel evaluationSeparatorLabel;
    private javax.swing.JPanel evaluationSeparatorPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButton firstCityOpenComparisonRadio;
    private javax.swing.JRadioButton firstCityRecreationComparisonRadio;
    private javax.swing.JRadioButton firstCityRestaurantComparisonRadio;
    private javax.swing.JFileChooser graphFileChooser;
    private javax.swing.JLabel highwayCounterLabel;
    private javax.swing.JPanel itineraryDataPanel;
    private javax.swing.JLabel itineraryDistanceResult;
    private javax.swing.JPanel itineraryPanel;
    private javax.swing.JPopupMenu.Separator jSeparatorMenuItems;
    private javax.swing.JPanel jumpCategorySelectorPanel;
    private javax.swing.JLabel jumpLabel;
    private javax.swing.JPanel jumpNumberSelectorPanel;
    private javax.swing.JSlider jumpNumberSlider;
    private javax.swing.JSpinner jumpNumberSpinner;
    private javax.swing.JPanel jumpSelectorPanel;
    private javax.swing.JTextField linkArrivalCategoryField;
    private javax.swing.JLabel linkArrivalLabel;
    private javax.swing.JTextField linkArrivalNameField;
    private javax.swing.JTextField linkCategoryField;
    private javax.swing.JPanel linkDataPanel;
    private javax.swing.JTextField linkDepartureCategoryField;
    private javax.swing.JLabel linkDepartureLabel;
    private javax.swing.JTextField linkDepartureNameField;
    private javax.swing.JTextField linkDistanceField;
    private javax.swing.JLabel linkDistanceLabel;
    private javax.swing.JPanel linkPanel;
    private javax.swing.JLabel linkcategoryLabel;
    private javax.swing.JLabel nationalCounterLabel;
    private javax.swing.JSeparator neighborsSeparation;
    private javax.swing.JLabel neighborsSeparationLabel;
    private javax.swing.JPanel neighborsSeparationPanel;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JLabel originItineraryLabel;
    private javax.swing.JTextField placeCategoryField;
    private javax.swing.JLabel placeCategoryLabel;
    private javax.swing.JPanel placeDataPanel;
    private javax.swing.JTextField placeNameField;
    private javax.swing.JLabel placeNameLabel;
    private javax.swing.JPanel placePanel;
    private javax.swing.JPanel planningItineraryPanel;
    private javax.swing.JLabel recreationComparisonLabel;
    private javax.swing.JPanel recreationComparisonPanel;
    private javax.swing.JLabel recreationCounterLabel;
    private javax.swing.JLabel recreationItineraryLabel;
    private javax.swing.JSpinner recreationItinerarySpinner;
    private javax.swing.JCheckBox recreationSelectorCheckBox;
    private javax.swing.JMenuItem refreshMenuItem;
    private javax.swing.JPanel relationPanel;
    private javax.swing.JPanel relationSeparationPanel;
    private javax.swing.JSeparator relationSeparator;
    private javax.swing.JLabel relationSeparatorLabel;
    private javax.swing.JLabel restaurantComparisonLabel;
    private javax.swing.JPanel restaurantComparisonPanel;
    private javax.swing.JLabel restaurantCounterLabel;
    private javax.swing.JLabel restaurantItineraryLabel;
    private javax.swing.JSpinner restaurantItinerarySpinner;
    private javax.swing.JCheckBox restaurantSelectorCheckBox;
    private javax.swing.JRadioButton secondCityOpenComparisonRadio;
    private javax.swing.JRadioButton secondCityRecreationComparisonRadio;
    private javax.swing.JRadioButton secondCityRestaurantComparisonRadio;
    private javax.swing.JSeparator stepSeparation;
    private javax.swing.JLabel stepSeparationLabel;
    private javax.swing.JPanel stepSeparationPanel;
    private javax.swing.JButton submitItineraryButton;
    private javax.swing.JButton submitNeighborsButton;
    private javax.swing.JPanel submitPanel;
    // End of variables declaration//GEN-END:variables
}